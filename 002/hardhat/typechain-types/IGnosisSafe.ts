/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IGnosisSafeInterface extends utils.Interface {
  contractName: "IGnosisSafe";
  functions: {
    "checkSignatures(bytes32,bytes,bytes)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "isOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;

  events: {};
}

export interface IGnosisSafe extends BaseContract {
  contractName: "IGnosisSafe";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGnosisSafeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  checkSignatures(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
