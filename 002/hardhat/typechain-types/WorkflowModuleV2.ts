/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace WorkflowModuleV2 {
  export type ActionStruct = { selector: BytesLike; arguments: BytesLike };

  export type ActionStructOutput = [string, string] & {
    selector: string;
    arguments: string;
  };
}

export declare namespace BulkTransfer {
  export type TransferStruct = {
    recipient: string;
    token: string;
    amount: BigNumberish;
  };

  export type TransferStructOutput = [string, string, BigNumber] & {
    recipient: string;
    token: string;
    amount: BigNumber;
  };
}

export interface WorkflowModuleV2Interface extends utils.Interface {
  contractName: "WorkflowModuleV2";
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "encodeTransactionData(address,address[],(bytes4,bytes)[],uint256)": FunctionFragment;
    "executeBulkTransfer(address,(address,address,uint256)[])": FunctionFragment;
    "executeWorkflow(address,address[],(bytes4,bytes)[],bytes)": FunctionFragment;
    "getTransactionHash(address,address[],(bytes4,bytes)[],uint256)": FunctionFragment;
    "indexOf(address[],address)": FunctionFragment;
    "nonce()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encodeTransactionData",
    values: [string, string[], WorkflowModuleV2.ActionStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBulkTransfer",
    values: [string, BulkTransfer.TransferStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWorkflow",
    values: [string, string[], WorkflowModuleV2.ActionStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [string, string[], WorkflowModuleV2.ActionStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexOf",
    values: [string[], string]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransactionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBulkTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;

  events: {};
}

export interface WorkflowModuleV2 extends BaseContract {
  contractName: "WorkflowModuleV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorkflowModuleV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    encodeTransactionData(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTransactionHash(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    indexOf(
      _haystack: string[],
      _needle: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  encodeTransactionData(
    _safe: string,
    _delegates: string[],
    _actions: WorkflowModuleV2.ActionStruct[],
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  executeBulkTransfer(
    safe: string,
    transfers: BulkTransfer.TransferStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeWorkflow(
    _safe: string,
    _delegates: string[],
    _actions: WorkflowModuleV2.ActionStruct[],
    _signatures: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTransactionHash(
    _safe: string,
    _delegates: string[],
    _actions: WorkflowModuleV2.ActionStruct[],
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  indexOf(
    _haystack: string[],
    _needle: string,
    overrides?: CallOverrides
  ): Promise<number>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    encodeTransactionData(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getTransactionHash(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    indexOf(
      _haystack: string[],
      _needle: string,
      overrides?: CallOverrides
    ): Promise<number>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    encodeTransactionData(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTransactionHash(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexOf(
      _haystack: string[],
      _needle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeTransactionData(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModuleV2.ActionStruct[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexOf(
      _haystack: string[],
      _needle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
