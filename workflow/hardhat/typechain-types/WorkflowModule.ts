/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace WorkflowModule {
  export type ActionStruct = { selector: BytesLike; arguments: BytesLike };

  export type ActionStructOutput = [string, string] & {
    selector: string;
    arguments: string;
  };

  export type BodyStruct = { numOne: BigNumberish };

  export type BodyStructOutput = [BigNumber] & { numOne: BigNumber };
}

export declare namespace BulkTransfer {
  export type TransferStruct = {
    recipient: string;
    token: string;
    amount: BigNumberish;
  };

  export type TransferStructOutput = [string, string, BigNumber] & {
    recipient: string;
    token: string;
    amount: BigNumber;
  };
}

export interface WorkflowModuleInterface extends utils.Interface {
  contractName: "WorkflowModule";
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "add(uint256,uint256)": FunctionFragment;
    "addWorkflow(address,address[],(bytes4,bytes)[])": FunctionFragment;
    "average(uint256[])": FunctionFragment;
    "encode(bytes4,bytes)": FunctionFragment;
    "exec(bytes4,bytes)": FunctionFragment;
    "executeBulkTransfer(address,(address,address,uint256)[])": FunctionFragment;
    "executeWorkflow(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getByte(string)": FunctionFragment;
    "getSelector(string)": FunctionFragment;
    "greet(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pack(bytes4,bytes)": FunctionFragment;
    "quoteUsdtFromEth(uint256)": FunctionFragment;
    "safeApproveWeth()": FunctionFragment;
    "safeWorkflowCount(address)": FunctionFragment;
    "sendUsdt(address)": FunctionFragment;
    "signature()": FunctionFragment;
    "sumArr((uint256)[])": FunctionFragment;
    "workflowDelegates(address,uint256,uint256)": FunctionFragment;
    "workflows(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWorkflow",
    values: [string, string[], WorkflowModule.ActionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "average",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBulkTransfer",
    values: [string, BulkTransfer.TransferStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWorkflow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getByte", values: [string]): string;
  encodeFunctionData(functionFragment: "getSelector", values: [string]): string;
  encodeFunctionData(functionFragment: "greet", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pack",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteUsdtFromEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeApproveWeth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeWorkflowCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sendUsdt", values: [string]): string;
  encodeFunctionData(functionFragment: "signature", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sumArr",
    values: [WorkflowModule.BodyStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "workflowDelegates",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "workflows",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "average", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBulkTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getByte", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "greet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteUsdtFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeApproveWeth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeWorkflowCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendUsdt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signature", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sumArr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workflowDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workflows", data: BytesLike): Result;

  events: {
    "ExecuteWorkflow(bytes)": EventFragment;
    "Quote(string,uint256,uint256)": EventFragment;
    "SendUsdt(uint256,uint256,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteWorkflow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Quote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendUsdt"): EventFragment;
}

export type ExecuteWorkflowEvent = TypedEvent<[string], { _data: string }>;

export type ExecuteWorkflowEventFilter = TypedEventFilter<ExecuteWorkflowEvent>;

export type QuoteEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { message: string; amountIn: BigNumber; quote: BigNumber }
>;

export type QuoteEventFilter = TypedEventFilter<QuoteEvent>;

export type SendUsdtEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  { amountIn: BigNumber; amountOut: BigNumber; poolFee: number }
>;

export type SendUsdtEventFilter = TypedEventFilter<SendUsdtEvent>;

export interface WorkflowModule extends BaseContract {
  contractName: "WorkflowModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorkflowModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModule.ActionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeWorkflow(
      _workflow: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getByte(_greet: string, overrides?: CallOverrides): Promise<[string]>;

    getSelector(_func: string, overrides?: CallOverrides): Promise<[string]>;

    greet(_greet: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeApproveWeth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeWorkflowCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sendUsdt(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signature(overrides?: CallOverrides): Promise<[string]>;

    sumArr(
      body: WorkflowModule.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workflowDelegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    workflows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { safe: string }>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  add(
    _a: BigNumberish,
    _b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addWorkflow(
    _safe: string,
    _delegates: string[],
    _actions: WorkflowModule.ActionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  average(
    _numbers: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  encode(
    selector: BytesLike,
    arguments: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  exec(
    selector: BytesLike,
    arguments: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeBulkTransfer(
    safe: string,
    transfers: BulkTransfer.TransferStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeWorkflow(
    _workflow: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getByte(_greet: string, overrides?: CallOverrides): Promise<string>;

  getSelector(_func: string, overrides?: CallOverrides): Promise<string>;

  greet(_greet: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pack(
    selector: BytesLike,
    arguments: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  quoteUsdtFromEth(
    _wethAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeApproveWeth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeWorkflowCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendUsdt(
    _recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signature(overrides?: CallOverrides): Promise<string>;

  sumArr(
    body: WorkflowModule.BodyStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workflowDelegates(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  workflows(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModule.ActionStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeWorkflow(
      _workflow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getByte(_greet: string, overrides?: CallOverrides): Promise<string>;

    getSelector(_func: string, overrides?: CallOverrides): Promise<string>;

    greet(_greet: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeApproveWeth(overrides?: CallOverrides): Promise<void>;

    safeWorkflowCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendUsdt(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { amountOut: BigNumber; poolFee: number }>;

    signature(overrides?: CallOverrides): Promise<string>;

    sumArr(
      body: WorkflowModule.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workflowDelegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    workflows(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ExecuteWorkflow(bytes)"(_data?: null): ExecuteWorkflowEventFilter;
    ExecuteWorkflow(_data?: null): ExecuteWorkflowEventFilter;

    "Quote(string,uint256,uint256)"(
      message?: null,
      amountIn?: null,
      quote?: null
    ): QuoteEventFilter;
    Quote(message?: null, amountIn?: null, quote?: null): QuoteEventFilter;

    "SendUsdt(uint256,uint256,uint24)"(
      amountIn?: null,
      amountOut?: null,
      poolFee?: null
    ): SendUsdtEventFilter;
    SendUsdt(
      amountIn?: null,
      amountOut?: null,
      poolFee?: null
    ): SendUsdtEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModule.ActionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeWorkflow(
      _workflow: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getByte(_greet: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSelector(_func: string, overrides?: CallOverrides): Promise<BigNumber>;

    greet(_greet: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeApproveWeth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeWorkflowCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendUsdt(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signature(overrides?: CallOverrides): Promise<BigNumber>;

    sumArr(
      body: WorkflowModule.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workflowDelegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workflows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addWorkflow(
      _safe: string,
      _delegates: string[],
      _actions: WorkflowModule.ActionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeBulkTransfer(
      safe: string,
      transfers: BulkTransfer.TransferStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeWorkflow(
      _workflow: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getByte(
      _greet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelector(
      _func: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greet(
      _greet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeApproveWeth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeWorkflowCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendUsdt(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sumArr(
      body: WorkflowModule.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workflowDelegates(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workflows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
