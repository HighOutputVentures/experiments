/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Utility {
  export type BodyStruct = { numOne: BigNumberish };

  export type BodyStructOutput = [BigNumber] & { numOne: BigNumber };
}

export interface UtilityInterface extends utils.Interface {
  contractName: "Utility";
  functions: {
    "add(uint256,uint256)": FunctionFragment;
    "average(uint256[])": FunctionFragment;
    "encode(bytes4,bytes)": FunctionFragment;
    "exec(bytes4,bytes)": FunctionFragment;
    "getByte(string)": FunctionFragment;
    "getSelector(string)": FunctionFragment;
    "greet(string)": FunctionFragment;
    "pack(bytes4,bytes)": FunctionFragment;
    "signature()": FunctionFragment;
    "sumArr((uint256)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "average",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getByte", values: [string]): string;
  encodeFunctionData(functionFragment: "getSelector", values: [string]): string;
  encodeFunctionData(functionFragment: "greet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pack",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "signature", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sumArr",
    values: [Utility.BodyStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "average", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getByte", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "greet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signature", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sumArr", data: BytesLike): Result;

  events: {};
}

export interface Utility extends BaseContract {
  contractName: "Utility";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UtilityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getByte(_greet: string, overrides?: CallOverrides): Promise<[string]>;

    getSelector(_func: string, overrides?: CallOverrides): Promise<[string]>;

    greet(_greet: string, overrides?: CallOverrides): Promise<[string]>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    signature(overrides?: CallOverrides): Promise<[string]>;

    sumArr(
      body: Utility.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  add(
    _a: BigNumberish,
    _b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  average(
    _numbers: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  encode(
    selector: BytesLike,
    arguments: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  exec(
    selector: BytesLike,
    arguments: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getByte(_greet: string, overrides?: CallOverrides): Promise<string>;

  getSelector(_func: string, overrides?: CallOverrides): Promise<string>;

  greet(_greet: string, overrides?: CallOverrides): Promise<string>;

  pack(
    selector: BytesLike,
    arguments: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  signature(overrides?: CallOverrides): Promise<string>;

  sumArr(
    body: Utility.BodyStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getByte(_greet: string, overrides?: CallOverrides): Promise<string>;

    getSelector(_func: string, overrides?: CallOverrides): Promise<string>;

    greet(_greet: string, overrides?: CallOverrides): Promise<string>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    signature(overrides?: CallOverrides): Promise<string>;

    sumArr(
      body: Utility.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getByte(_greet: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSelector(_func: string, overrides?: CallOverrides): Promise<BigNumber>;

    greet(_greet: string, overrides?: CallOverrides): Promise<BigNumber>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signature(overrides?: CallOverrides): Promise<BigNumber>;

    sumArr(
      body: Utility.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _a: BigNumberish,
      _b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    average(
      _numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exec(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getByte(
      _greet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelector(
      _func: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greet(
      _greet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pack(
      selector: BytesLike,
      arguments: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sumArr(
      body: Utility.BodyStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
