/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SimpleSwapInterface extends utils.Interface {
  contractName: "SimpleSwap";
  functions: {
    "getBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "quoteUsdtFromEth(uint256)": FunctionFragment;
    "safeApproveWeth()": FunctionFragment;
    "swapAndSend(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteUsdtFromEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeApproveWeth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swapAndSend", values: [string]): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteUsdtFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeApproveWeth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndSend",
    data: BytesLike
  ): Result;

  events: {
    "Quote(string,uint256,uint256)": EventFragment;
    "SwapAndSend(uint256,uint256,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Quote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndSend"): EventFragment;
}

export type QuoteEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { message: string; amountIn: BigNumber; quote: BigNumber }
>;

export type QuoteEventFilter = TypedEventFilter<QuoteEvent>;

export type SwapAndSendEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  { amountIn: BigNumber; amountOut: BigNumber; poolFee: number }
>;

export type SwapAndSendEventFilter = TypedEventFilter<SwapAndSendEvent>;

export interface SimpleSwap extends BaseContract {
  contractName: "SimpleSwap";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeApproveWeth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndSend(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  quoteUsdtFromEth(
    _wethAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeApproveWeth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndSend(
    _recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeApproveWeth(overrides?: CallOverrides): Promise<void>;

    swapAndSend(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { amountOut: BigNumber; poolFee: number }>;
  };

  filters: {
    "Quote(string,uint256,uint256)"(
      message?: null,
      amountIn?: null,
      quote?: null
    ): QuoteEventFilter;
    Quote(message?: null, amountIn?: null, quote?: null): QuoteEventFilter;

    "SwapAndSend(uint256,uint256,uint24)"(
      amountIn?: null,
      amountOut?: null,
      poolFee?: null
    ): SwapAndSendEventFilter;
    SwapAndSend(
      amountIn?: null,
      amountOut?: null,
      poolFee?: null
    ): SwapAndSendEventFilter;
  };

  estimateGas: {
    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeApproveWeth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndSend(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteUsdtFromEth(
      _wethAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeApproveWeth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndSend(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
