/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SimpleSwap, SimpleSwapInterface } from "../SimpleSwap";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quote",
        type: "uint256",
      },
    ],
    name: "Quote",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "poolFee",
        type: "uint24",
      },
    ],
    name: "SwapAndSend",
    type: "event",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_wethAmount",
        type: "uint256",
      },
    ],
    name: "quoteUsdtFromEth",
    outputs: [
      {
        internalType: "uint256",
        name: "quote",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "safeApproveWeth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "swapAndSend",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint24",
        name: "poolFee",
        type: "uint24",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805161106e61006060003960006102cc015261106e6000f3fe60806040526004361061004a5760003560e01c806312065fe01461004f5780635ef12cb21461007a5780636751c831146100845780638da5cb5b146100b4578063c1583392146100df575b600080fd5b34801561005b57600080fd5b50610064610110565b6040516100719190610883565b60405180910390f35b61008261012f565b005b61009e600480360381019061009991906108cf565b61018f565b6040516100ab9190610883565b60405180910390f35b3480156100c057600080fd5b506100c96102ca565b6040516100d6919061093d565b60405180910390f35b6100f960048036038101906100f49190610996565b6102ee565b6040516101079291906109e1565b60405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff1631905090565b3461013981610507565b61015973c778417e063141139fce010982780140aa0cd5ab33303461054d565b61018c73c778417e063141139fce010982780140aa0cd5ab73e592427a0aece92de3edee1f18e0157c05861564346106a5565b50565b60006101996107fa565b816101a381610507565b600073c778417e063141139fce010982780140aa0cd5ab9050600073eb8f08a975ab53e34d8a0330e0d34de942c9592690506000610bb89050600073b27308f9f90d607463bb33ea1bebb41c27ce5ab673ffffffffffffffffffffffffffffffffffffffff1663f7729d438585858b866040518663ffffffff1660e01b8152600401610233959493929190610a28565b602060405180830381600087803b15801561024d57600080fd5b505af1158015610261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102859190610a90565b95507f6cba9c15a7be8f1a884ac4dc44d3fee2a7a22f2b93a2dd862914a5b0530d635587876040516102b8929190610b1a565b60405180910390a15050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080346102fb81610507565b61031b73c778417e063141139fce010982780140aa0cd5ab33303461054d565b61034e73c778417e063141139fce010982780140aa0cd5ab73e592427a0aece92de3edee1f18e0157c05861564346106a5565b610bb89150600060405180610100016040528073c778417e063141139fce010982780140aa0cd5ab73ffffffffffffffffffffffffffffffffffffffff16815260200173ad6d458402f60fd3bd25163575031acdce07538d73ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001600f426103f59190610b85565b815260200134815260200160018152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016104719190610cb9565b602060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c39190610a90565b93507f2531495aaf0af38c3de3c7aa29700c3deb2a0a2e9711405412177ba532fc48c63485856040516104f893929190610cd5565b60405180910390a15050915091565b6000811161054a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054190610d58565b60405180910390fd5b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161058493929190610d78565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105ee9190610e29565b6000604051808303816000865af19150503d806000811461062b576040519150601f19603f3d011682016040523d82523d6000602084013e610630565b606091505b509150915081801561065e575060008151148061065d57508080602001905181019061065c9190610e78565b5b5b61069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069490610ef1565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016106da929190610f11565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107449190610e29565b6000604051808303816000865af19150503d8060008114610781576040519150601f19603f3d011682016040523d82523d6000602084013e610786565b606091505b50915091508180156107b457506000815114806107b35750808060200190518101906107b29190610e78565b5b5b6107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea90610f86565b60405180910390fd5b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90611018565b60405180910390fd5b565b6000819050919050565b61087d8161086a565b82525050565b60006020820190506108986000830184610874565b92915050565b600080fd5b6108ac8161086a565b81146108b757600080fd5b50565b6000813590506108c9816108a3565b92915050565b6000602082840312156108e5576108e461089e565b5b60006108f3848285016108ba565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610927826108fc565b9050919050565b6109378161091c565b82525050565b6000602082019050610952600083018461092e565b92915050565b6000610963826108fc565b9050919050565b61097381610958565b811461097e57600080fd5b50565b6000813590506109908161096a565b92915050565b6000602082840312156109ac576109ab61089e565b5b60006109ba84828501610981565b91505092915050565b600062ffffff82169050919050565b6109db816109c3565b82525050565b60006040820190506109f66000830185610874565b610a0360208301846109d2565b9392505050565b610a1381610958565b82525050565b610a22816108fc565b82525050565b600060a082019050610a3d6000830188610a0a565b610a4a6020830187610a0a565b610a5760408301866109d2565b610a646060830185610874565b610a716080830184610a19565b9695505050505050565b600081519050610a8a816108a3565b92915050565b600060208284031215610aa657610aa561089e565b5b6000610ab484828501610a7b565b91505092915050565b600082825260208201905092915050565b7f455448202d3e2055534454000000000000000000000000000000000000000000600082015250565b6000610b04600b83610abd565b9150610b0f82610ace565b602082019050919050565b60006060820190508181036000830152610b3381610af7565b9050610b426020830185610874565b610b4f6040830184610874565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b908261086a565b9150610b9b8361086a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bd057610bcf610b56565b5b828201905092915050565b610be481610958565b82525050565b610bf3816109c3565b82525050565b610c028161086a565b82525050565b610c11816108fc565b82525050565b61010082016000820151610c2e6000850182610bdb565b506020820151610c416020850182610bdb565b506040820151610c546040850182610bea565b506060820151610c676060850182610bdb565b506080820151610c7a6080850182610bf9565b5060a0820151610c8d60a0850182610bf9565b5060c0820151610ca060c0850182610bf9565b5060e0820151610cb360e0850182610c08565b50505050565b600061010082019050610ccf6000830184610c17565b92915050565b6000606082019050610cea6000830186610874565b610cf76020830185610874565b610d0460408301846109d2565b949350505050565b7f4d7573742070617373206e6f6e203020616d6f756e7400000000000000000000600082015250565b6000610d42601683610abd565b9150610d4d82610d0c565b602082019050919050565b60006020820190508181036000830152610d7181610d35565b9050919050565b6000606082019050610d8d6000830186610a0a565b610d9a6020830185610a0a565b610da76040830184610874565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015610de3578082015181840152602081019050610dc8565b83811115610df2576000848401525b50505050565b6000610e0382610daf565b610e0d8185610dba565b9350610e1d818560208601610dc5565b80840191505092915050565b6000610e358284610df8565b915081905092915050565b60008115159050919050565b610e5581610e40565b8114610e6057600080fd5b50565b600081519050610e7281610e4c565b92915050565b600060208284031215610e8e57610e8d61089e565b5b6000610e9c84828501610e63565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000610edb600383610abd565b9150610ee682610ea5565b602082019050919050565b60006020820190508181036000830152610f0a81610ece565b9050919050565b6000604082019050610f266000830185610a0a565b610f336020830184610874565b9392505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000610f70600283610abd565b9150610f7b82610f3a565b602082019050919050565b60006020820190508181036000830152610f9f81610f63565b9050919050565b7f4f6e6c79207468652060576f726b666c6f774d6f64756c65602063616e20636160008201527f6c6c000000000000000000000000000000000000000000000000000000000000602082015250565b6000611002602283610abd565b915061100d82610fa6565b604082019050919050565b6000602082019050818103600083015261103181610ff5565b905091905056fea264697066735822122086a926d3b7276a858db6ed7195a3645e24265b28bbd1e0df171c81024a92f07064736f6c63430008090033";

type SimpleSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleSwap__factory extends ContractFactory {
  constructor(...args: SimpleSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SimpleSwap";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimpleSwap> {
    return super.deploy(overrides || {}) as Promise<SimpleSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SimpleSwap {
    return super.attach(address) as SimpleSwap;
  }
  connect(signer: Signer): SimpleSwap__factory {
    return super.connect(signer) as SimpleSwap__factory;
  }
  static readonly contractName: "SimpleSwap";
  public readonly contractName: "SimpleSwap";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleSwapInterface {
    return new utils.Interface(_abi) as SimpleSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleSwap {
    return new Contract(address, _abi, signerOrProvider) as SimpleSwap;
  }
}
